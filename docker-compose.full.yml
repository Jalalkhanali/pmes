version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: pmes-postgres
    environment:
      POSTGRES_DB: energy_planning
      POSTGRES_USER: energy_user
      POSTGRES_PASSWORD: energy_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U energy_user -d energy_planning"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - pmes-network

  # Backend API
  pmes-backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: pmes-backend
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: energy
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/energy_planning
      SPRING_DATASOURCE_USERNAME: energy_user
      SPRING_DATASOURCE_PASSWORD: energy_pass
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pmes-network

  # Frontend
  pmes-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: pmes-frontend
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://pmes-backend:8080
      NODE_ENV: production
    depends_on:
      pmes-backend:
        condition: service_healthy
    volumes:
      - ./frontend/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - pmes-network

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: pmes-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - pmes-backend
      - pmes-frontend
    networks:
      - pmes-network
    profiles:
      - production

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: pmes-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - pmes-network
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: pmes-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - pmes-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: pmes-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - pmes-network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  pmes-network:
    driver: bridge 